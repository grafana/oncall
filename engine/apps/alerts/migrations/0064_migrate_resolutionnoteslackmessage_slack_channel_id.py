# Generated by Django 4.2.16 on 2024-11-01 10:58
import logging

from django.db import migrations
import django_migration_linter as linter

logger = logging.getLogger(__name__)


def populate_slack_channel(apps, schema_editor):
    ResolutionNoteSlackMessage = apps.get_model("alerts", "ResolutionNoteSlackMessage")
    SlackChannel = apps.get_model("slack", "SlackChannel")

    logger.info("Starting migration to populate slack_channel field.")

    queryset = ResolutionNoteSlackMessage.objects.filter(
        _slack_channel_id__isnull=False,
        alert_group__channel__organization__slack_team_identity__isnull=False,
    )
    total_resolution_notes = queryset.count()
    updated_resolution_notes = 0
    missing_resolution_notes = 0
    resolution_notes_to_update = []

    logger.info(f"Total resolution note slack messages to process: {total_resolution_notes}")

    for resolution_note in queryset:
        slack_id = resolution_note._slack_channel_id
        slack_team_identity = resolution_note.alert_group.channel.organization.slack_team_identity

        try:
            slack_channel = SlackChannel.objects.get(slack_id=slack_id, slack_team_identity=slack_team_identity)
            resolution_note.slack_channel = slack_channel
            resolution_notes_to_update.append(resolution_note)

            updated_resolution_notes += 1
            logger.info(
                f"ResolutionNoteSlackMessage {resolution_note.id} updated with SlackChannel {slack_channel.id} "
                f"(slack_id: {slack_id})."
            )
        except SlackChannel.DoesNotExist:
            missing_resolution_notes += 1
            logger.warning(
                f"SlackChannel with slack_id {slack_id} and slack_team_identity {slack_team_identity} "
                f"does not exist for ResolutionNoteSlackMessage {resolution_note.id}."
            )

    if resolution_notes_to_update:
        ResolutionNoteSlackMessage.objects.bulk_update(resolution_notes_to_update, ["slack_channel"])
        logger.info(
            f"Bulk updated {len(resolution_notes_to_update)} ResolutionNoteSlackMessage with their Slack channel."
        )

    logger.info(
        f"Finished migration. Total resolution note slack messages processed: {total_resolution_notes}. "
        f"Resolution note slack messages updated: {updated_resolution_notes}. "
        f"Missing SlackChannels: {missing_resolution_notes}."
    )



class Migration(migrations.Migration):

    dependencies = [
        ('alerts', '0063_migrate_channelfilter_slack_channel_id'),
    ]

    operations = [
        # simply setting this new field is okay, we are not deleting the value of channel
        # therefore, no need to revert it
        linter.IgnoreMigration(),
        migrations.RunPython(populate_slack_channel, migrations.RunPython.noop),
    ]
