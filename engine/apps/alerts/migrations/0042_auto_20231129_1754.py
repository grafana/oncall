# Generated by Django 4.2.7 on 2023-11-29 17:54
import logging
from collections import defaultdict

from django.db import migrations

from apps.metrics_exporter.helpers import metrics_add_integrations_to_cache

logger = logging.getLogger(__name__)


def create_missing_direct_paging_integrations(apps, schema_editor):
    """Create missing direct paging integrations for teams that don't have it yet."""

    Team = apps.get_model("user_management", "Team")
    AlertReceiveChannel = apps.get_model("alerts", "AlertReceiveChannel")
    ChannelFilter = apps.get_model("alerts", "ChannelFilter")

    alert_receive_channel_ids = AlertReceiveChannel.objects.filter(integration="direct_paging", team__isnull=False).values_list("team_id", flat=True)
    teams = Team.objects.exclude(id__in=alert_receive_channel_ids)
    logger.info(f"Creating missing direct paging integrations for {teams.count()} teams.")

    # create integrations
    AlertReceiveChannel.objects.bulk_create(
        [
            AlertReceiveChannel(
                organization=team.organization,
                team=team,
                integration="direct_paging",
                verbal_name=f"Direct paging ({team.name} team)",
            )
            for team in teams
        ],
        batch_size=5000,
        ignore_conflicts=True,  # ignore if direct paging integration already exists for team
    )

    # fetch integrations for teams (some of them are created above, but some may already exist previously)
    team_integrations = AlertReceiveChannel.objects.filter(team__in=teams, integration="direct_paging")

    # create default routes
    ChannelFilter.objects.bulk_create(
        [
            ChannelFilter(
                alert_receive_channel=integration,
                filtering_term=None,
                is_default=True,
                order=0,
            )
            for integration in team_integrations
        ],
        batch_size=5000,
        ignore_conflicts=True,  # ignore if default route already exists for integration
    )

    # add integrations to metrics cache (one function call per organization)
    organization_integrations = defaultdict(list)
    for integration in team_integrations:
        organization_integrations[integration.organization].append(integration)

    for organization, integrations in organization_integrations.items():
        metrics_add_integrations_to_cache(integrations, organization)


class Migration(migrations.Migration):

    dependencies = [
        ('alerts', '0041_alertreceivechannel_unique_direct_paging_integration_per_team'),
    ]

    operations = [
        migrations.RunPython(create_missing_direct_paging_integrations, migrations.RunPython.noop),
    ]
