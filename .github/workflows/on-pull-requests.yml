name: On pull requests

on:
  pull_request:
  # You can use the merge_group event to trigger your GitHub Actions workflow when
  # a pull request is added to a merge queue
  # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#triggering-merge-group-checks-with-github-actions
  merge_group:

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  linting-and-tests:
    name: Linting and tests
    uses: ./.github/workflows/linting-and-tests.yml

  snyk-security-scan:
    name: Snyk security scan
    uses: ./.github/workflows/snyk-security-scan.yml
    secrets: inherit

  joey-testing:
    name: Joey testing
    runs-on: ubuntu-latest
    # These permissions are needed to assume roles from Github's OIDC.
    # https://github.com/grafana/shared-workflows/tree/main/actions/get-vault-secrets
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      # This will fetch the secret keys from vault and set them as environment variables for subsequent steps
      - name: Get Vault secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          repo_secrets: |
            GRAFANA_ACCESS_POLICY_TOKEN=github_actions:cloud-access-policy-token
            GCS_PLUGIN_PUBLISHER_SERVICE_ACCOUNT_JSON=github_actions:gcs-plugin-publisher
      - name: Determine GCS artifact URL
        shell: bash
        id: gcs-artifact-url
        # yamllint disable rule:line-length
        run: |
          echo url="https://storage.googleapis.com/grafana-oncall-app/releases/grafana-oncall-app-1.9.27.zip" >> $GITHUB_OUTPUT
      - name: Publish plugin to grafana.com
        run: |
          curl -f -w "status=%{http_code}" -s -H "Authorization: Bearer ${{ env.GRAFANA_ACCESS_POLICY_TOKEN }}" -d "download[any][url]=${{ steps.gcs-artifact-url.outputs.url }}" -d "download[any][md5]=$(curl -sL ${{ steps.gcs-artifact-url.outputs.url }} | md5sum | cut -d'' '' -f1)" -d url=https://github.com/grafana/oncall/grafana-plugin https://grafana.com/api/plugins
        # yamllint enable rule:line-length
