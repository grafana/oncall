name: e2e tests

on:
  workflow_call:
    inputs:
      grafana_version:
        required: true
        type: string
      browsers:
        required: true
        type: string

jobs:
  end-to-end-tests:
    # default "ubuntu-latest" runners only provide 2 CPU cores + 7GB of RAM. this seems to lead to HTTP 504s from
    # the oncall backend, and hence, flaky tests. Let's use CI runners w/ more resources to avoid this (plus
    # this will allow us to run more backend containers and parralelize the tests)
    runs-on: ubuntu-latest-16-cores
    name: "Grafana: ${{ inputs.grafana_version }}"
    environment:
      name: github-pages
    permissions:
      id-token: write
      pages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@94c3c3d9567a0205de6da68a76c428ce4e769af1 #v2.0.0
        with:
          comment_on_pr: false
          proc_trace_chart_show: false
          proc_trace_table_show: false

      - name: Install Kind
        uses: helm/kind-action@0025e74a8c7512023d06dc019c617aa3cf561fde #v1.10.0
        with:
          config: ./dev/kind.yml
          install_only: true

      - name: Install frontend dependencies
        uses: ./.github/actions/install-frontend-dependencies

      - name: Install Tilt
        run: |
          curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash

      - name: Install ctlptl
        run: |
          CTLPTL_VERSION="0.8.20"
          CTLPTL_FILE_NAME="ctlptl.$CTLPTL_VERSION.linux.x86_64.tar.gz"
          curl -fsSL https://github.com/tilt-dev/ctlptl/releases/download/v$CTLPTL_VERSION/$CTLPTL_FILE_NAME | \
            tar -xzv -C /usr/local/bin ctlptl

      - name: Use cached plugin frontend build
        id: cache-plugin-frontend
        uses: actions/cache@v4
        with:
          path: grafana-plugin/dist
          key: ${{ runner.os }}-plugin-frontend-${{ hashFiles('grafana-plugin/src/**/*', 'grafana-plugin/pnpm.lock') }}

      - name: Build plugin frontend
        if: steps.cache-plugin-frontend.outputs.cache-hit != 'true'
        working-directory: grafana-plugin
        run: pnpm build:dev

      # helpful reference for properly caching the playwright binaries/dependencies
      # https://playwrightsolutions.com/playwright-github-action-to-cache-the-browser-binaries/
      - name: Get installed Playwright version
        id: playwright-version
        working-directory: grafana-plugin
        run: >
          echo "PLAYWRIGHT_VERSION=$(cat ./package.json |
          jq -r '.devDependencies["@playwright/test"]')" >> $GITHUB_ENV

      - name: Cache Playwright binaries/dependencies
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: "~/.cache/ms-playwright"
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}-${{ inputs.browsers }}

      - name: Create cluster
        run: make cluster/up

      - name: Install Playwright deps
        shell: bash
        working-directory: grafana-plugin
        run: pnpm playwright install

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.5"

      - name: Install Mage
        run: go install github.com/magefile/mage@v1.15.0

      - name: Tilt CI - standard E2E tests
        shell: bash
        env:
          GRAFANA_VERSION: ${{ inputs.grafana_version }}
          BROWSERS: ${{ inputs.browsers }}
        run: tilt ci

      - name: Setup Pages
        if: failure()
        uses: actions/configure-pages@v2

      - name: Upload artifact
        if: failure()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./grafana-plugin/playwright-report/

      - name: Deploy to GitHub Pages
        if: failure()
        id: deployment
        uses: actions/deploy-pages@v3
        with:
          preview: true

      - name: Linked Github Page
        if: failure()
        run: |
          echo "Test report has been deployed to [GitHub Pages](https://grafana.github.io/oncall/) :rocket:" \
          >> $GITHUB_STEP_SUMMARY
