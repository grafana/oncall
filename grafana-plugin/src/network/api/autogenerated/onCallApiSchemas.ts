/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0 (internal/v1)
 */
export type Alert = {
  id: string;
  /**
   * @format uri
   * @maxLength 500
   */
  link_to_upstream_details?: string | null;
  render_for_web: string;
  /**
   * @format date-time
   */
  created_at: string;
};

export type AlertGroup = {
  pk: string;
  alerts_count: number;
  /**
   * @maximum 2147483647
   * @minimum -2147483648
   */
  inside_organization_number?: number;
  alert_receive_channel: FastAlertReceiveChannel;
  resolved?: boolean;
  /**
   * * `0` - source
   * * `1` - user
   * * `2` - not yet
   * * `3` - last escalation step
   * * `4` - archived
   * * `5` - wiped
   * * `6` - stop maintenance
   * * `7` - not yet, autoresolve disabled
   *
   * @minimum -2147483648
   * @maximum 2147483647
   */
  resolved_by?: ResolvedByEnum;
  resolved_by_user?: FastUser;
  /**
   * @format date-time
   */
  resolved_at?: string | null;
  /**
   * @format date-time
   */
  acknowledged_at?: string | null;
  acknowledged?: boolean;
  acknowledged_on_source?: boolean;
  acknowledged_by_user?: FastUser;
  silenced?: boolean;
  silenced_by_user?: FastUser;
  /**
   * @format date-time
   */
  silenced_at?: string | null;
  /**
   * @format date-time
   */
  silenced_until?: string | null;
  /**
   * @format date-time
   */
  started_at: string;
  related_users: UserShort[];
  render_for_web: RenderForWeb;
  dependent_alert_groups: ShortAlertGroup[];
  root_alert_group: ShortAlertGroup;
  status: string;
  /**
   * Generate a link for AlertGroup to declare Grafana Incident by click
   */
  declare_incident_link: string;
  team: string | null;
  /**
   * @maxLength 100
   */
  grafana_incident_id?: string | null;
  labels: AlertGroupLabel[];
  alerts: Alert[];
  render_after_resolve_report_json: {
    time: string;
    action: string;
    realm: 'user_notification' | 'alert_group' | 'resolution_note';
    type: number;
    created_at: string;
    author: {
      username: string;
      pk: string;
      avatar: string;
      avatar_full: string;
    };
  }[];
  slack_permalink: string | null;
  permalinks: {
    slack: string | null;
    telegram: string | null;
    web: string;
  };
  /**
   * @format date-time
   */
  last_alert_at: string;
  paged_users: {
    id: number;
    username: string;
    name: string;
    pk: string;
    avatar: string;
    avatar_full: string;
    important: boolean;
  }[];
};

export type AlertGroupLabel = {
  key: Key;
  value: Value;
};

export type AlertGroupList = {
  pk: string;
  alerts_count: number;
  /**
   * @maximum 2147483647
   * @minimum -2147483648
   */
  inside_organization_number?: number;
  alert_receive_channel: FastAlertReceiveChannel;
  resolved?: boolean;
  /**
   * * `0` - source
   * * `1` - user
   * * `2` - not yet
   * * `3` - last escalation step
   * * `4` - archived
   * * `5` - wiped
   * * `6` - stop maintenance
   * * `7` - not yet, autoresolve disabled
   *
   * @minimum -2147483648
   * @maximum 2147483647
   */
  resolved_by?: ResolvedByEnum;
  resolved_by_user?: FastUser;
  /**
   * @format date-time
   */
  resolved_at?: string | null;
  /**
   * @format date-time
   */
  acknowledged_at?: string | null;
  acknowledged?: boolean;
  acknowledged_on_source?: boolean;
  acknowledged_by_user?: FastUser;
  silenced?: boolean;
  silenced_by_user?: FastUser;
  /**
   * @format date-time
   */
  silenced_at?: string | null;
  /**
   * @format date-time
   */
  silenced_until?: string | null;
  /**
   * @format date-time
   */
  started_at: string;
  related_users: UserShort[];
  render_for_web: RenderForWeb;
  dependent_alert_groups: ShortAlertGroup[];
  root_alert_group: ShortAlertGroup;
  status: string;
  /**
   * Generate a link for AlertGroup to declare Grafana Incident by click
   */
  declare_incident_link: string;
  team: string | null;
  /**
   * @maxLength 100
   */
  grafana_incident_id?: string | null;
  labels: AlertGroupLabel[];
};

export type AlertGroupStats = {
  count: number;
};

export type FastAlertReceiveChannel = {
  id: string;
  integration: string;
  /**
   * @maxLength 150
   */
  verbal_name?: string | null;
  deleted: boolean;
};

export type FastUser = {
  pk: string;
  username: string;
};

export type Key = {
  id: string;
  name: string;
};

export type LabelCreate = {
  key: LabelRepr;
  values: LabelRepr[];
};

export type LabelKey = {
  id: string;
  /**
   * @maxLength 200
   */
  name: string;
};

export type LabelKeyValues = {
  key: LabelKey;
  values: LabelValue[];
};

export type LabelRepr = {
  name: string;
};

export type LabelValue = {
  id: string;
  /**
   * @maxLength 200
   */
  name: string;
};

export type PaginatedAlertGroupListList = {
  next?: string | null;
  previous?: string | null;
  results?: AlertGroupList[];
};

export type PaginatedsilenceOptionsList = {
  next?: string | null;
  previous?: string | null;
  results?: SilenceOptions[];
};

/**
 * * `0` - source
 * * `1` - user
 * * `2` - not yet
 * * `3` - last escalation step
 * * `4` - archived
 * * `5` - wiped
 * * `6` - stop maintenance
 * * `7` - not yet, autoresolve disabled
 */
export type ResolvedByEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;

export type ShortAlertGroup = {
  pk: string;
  render_for_web: RenderForWeb;
  alert_receive_channel: FastAlertReceiveChannel;
  inside_organization_number: number;
};

export type UserShort = {
  username: string;
  pk: string;
  avatar: string;
  avatar_full: string;
};

export type Value = {
  id: string;
  name: string;
};

export type RenderForWeb = {
  title: string;
  message: string;
  image_url: string;
  source_link: string;
};

export type SilenceOptions = {
  value: string;
  display_name: string;
};
