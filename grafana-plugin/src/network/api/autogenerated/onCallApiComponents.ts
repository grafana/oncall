/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0 (internal/v1)
 */
import type * as Fetcher from './onCallApiFetcher';
import { onCallApiFetch } from './onCallApiFetcher';
import type * as Schemas from 'network/api/autogenerated/onCallApiSchemas';
import '../custom.types';

export type AlertgroupsListQueryParams = {
  /**
   * The pagination cursor value.
   */
  cursor?: string;
  /**
   * Number of results to return per page.
   */
  perpage?: number;
  /**
   * A search term.
   */
  search?: string;
};

export type AlertgroupsListError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsListVariables = {
  queryParams?: AlertgroupsListQueryParams;
};

/**
 * Fetch a list of alert groups
 */
export const alertgroupsList = (variables: AlertgroupsListVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.PaginatedAlertGroupListList,
    AlertgroupsListError,
    undefined,
    {},
    AlertgroupsListQueryParams,
    {}
  >({ url: '/alertgroups/', method: 'get', ...variables, signal });

export type AlertgroupsRetrievePathParams = {
  id: string;
};

export type AlertgroupsRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsRetrieveVariables = {
  pathParams: AlertgroupsRetrievePathParams;
};

/**
 * Fetch a single alert group
 */
export const alertgroupsRetrieve = (variables: AlertgroupsRetrieveVariables, signal?: AbortSignal) =>
  onCallApiFetch<Schemas.AlertGroup, AlertgroupsRetrieveError, undefined, {}, {}, AlertgroupsRetrievePathParams>({
    url: '/alertgroups/{id}/',
    method: 'get',
    ...variables,
    signal,
  });

const b = async () => {
  const a = await alertgroupsRetrieve({ pathParams: { id: 'string' } });
};

export type AlertgroupsDestroyPathParams = {
  id: string;
};

export type AlertgroupsDestroyError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsDestroyVariables = {
  pathParams: AlertgroupsDestroyPathParams;
};

/**
 * Delete an alert group
 */
export const alertgroupsDestroy = (variables: AlertgroupsDestroyVariables, signal?: AbortSignal) =>
  onCallApiFetch<undefined, AlertgroupsDestroyError, undefined, {}, {}, AlertgroupsDestroyPathParams>({
    url: '/alertgroups/{id}/',
    method: 'delete',
    ...variables,
    signal,
  });

export type AlertgroupsAcknowledgeCreatePathParams = {
  id: string;
};

export type AlertgroupsAcknowledgeCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsAcknowledgeCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsAcknowledgeCreatePathParams;
};

/**
 * Acknowledge an alert group
 */
export const alertgroupsAcknowledgeCreate = (variables: AlertgroupsAcknowledgeCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsAcknowledgeCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsAcknowledgeCreatePathParams
  >({ url: '/alertgroups/{id}/acknowledge/', method: 'post', ...variables, signal });

export type AlertgroupsAttachCreatePathParams = {
  id: string;
};

export type AlertgroupsAttachCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsAttachCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsAttachCreatePathParams;
};

/**
 * Attach alert group to another alert group
 */
export const alertgroupsAttachCreate = (variables: AlertgroupsAttachCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsAttachCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsAttachCreatePathParams
  >({ url: '/alertgroups/{id}/attach/', method: 'post', ...variables, signal });

export type AlertgroupsPreviewTemplateCreatePathParams = {
  id: string;
};

export type AlertgroupsPreviewTemplateCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsPreviewTemplateCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsPreviewTemplateCreatePathParams;
};

/**
 * Preview a template for an alert group
 */
export const alertgroupsPreviewTemplateCreate = (
  variables: AlertgroupsPreviewTemplateCreateVariables,
  signal?: AbortSignal
) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsPreviewTemplateCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsPreviewTemplateCreatePathParams
  >({ url: '/alertgroups/{id}/preview_template/', method: 'post', ...variables, signal });

export type AlertgroupsResolveCreatePathParams = {
  id: string;
};

export type AlertgroupsResolveCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsResolveCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsResolveCreatePathParams;
};

/**
 * Resolve an alert group
 */
export const alertgroupsResolveCreate = (variables: AlertgroupsResolveCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsResolveCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsResolveCreatePathParams
  >({ url: '/alertgroups/{id}/resolve/', method: 'post', ...variables, signal });

export type AlertgroupsSilenceCreatePathParams = {
  id: string;
};

export type AlertgroupsSilenceCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsSilenceCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsSilenceCreatePathParams;
};

/**
 * Silence an alert group for a specified delay
 */
export const alertgroupsSilenceCreate = (variables: AlertgroupsSilenceCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsSilenceCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsSilenceCreatePathParams
  >({ url: '/alertgroups/{id}/silence/', method: 'post', ...variables, signal });

export type AlertgroupsUnacknowledgeCreatePathParams = {
  id: string;
};

export type AlertgroupsUnacknowledgeCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsUnacknowledgeCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsUnacknowledgeCreatePathParams;
};

/**
 * Unacknowledge an alert group
 */
export const alertgroupsUnacknowledgeCreate = (
  variables: AlertgroupsUnacknowledgeCreateVariables,
  signal?: AbortSignal
) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsUnacknowledgeCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsUnacknowledgeCreatePathParams
  >({ url: '/alertgroups/{id}/unacknowledge/', method: 'post', ...variables, signal });

export type AlertgroupsUnattachCreatePathParams = {
  id: string;
};

export type AlertgroupsUnattachCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsUnattachCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsUnattachCreatePathParams;
};

/**
 * Unattach an alert group that is already attached to another alert group
 */
export const alertgroupsUnattachCreate = (variables: AlertgroupsUnattachCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsUnattachCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsUnattachCreatePathParams
  >({ url: '/alertgroups/{id}/unattach/', method: 'post', ...variables, signal });

export type AlertgroupsUnpageUserCreatePathParams = {
  id: string;
};

export type AlertgroupsUnpageUserCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsUnpageUserCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsUnpageUserCreatePathParams;
};

/**
 * Remove a user that was directly paged for the alert group
 */
export const alertgroupsUnpageUserCreate = (variables: AlertgroupsUnpageUserCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsUnpageUserCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsUnpageUserCreatePathParams
  >({ url: '/alertgroups/{id}/unpage_user/', method: 'post', ...variables, signal });

export type AlertgroupsUnresolveCreatePathParams = {
  id: string;
};

export type AlertgroupsUnresolveCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsUnresolveCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsUnresolveCreatePathParams;
};

/**
 * Unresolve an alert group
 */
export const alertgroupsUnresolveCreate = (variables: AlertgroupsUnresolveCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsUnresolveCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsUnresolveCreatePathParams
  >({ url: '/alertgroups/{id}/unresolve/', method: 'post', ...variables, signal });

export type AlertgroupsUnsilenceCreatePathParams = {
  id: string;
};

export type AlertgroupsUnsilenceCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsUnsilenceCreateVariables = {
  body: Schemas.AlertGroup;
  pathParams: AlertgroupsUnsilenceCreatePathParams;
};

/**
 * Unsilence a silenced alert group
 */
export const alertgroupsUnsilenceCreate = (variables: AlertgroupsUnsilenceCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.AlertGroup,
    AlertgroupsUnsilenceCreateError,
    Schemas.AlertGroup,
    {},
    {},
    AlertgroupsUnsilenceCreatePathParams
  >({ url: '/alertgroups/{id}/unsilence/', method: 'post', ...variables, signal });

export type AlertgroupsBulkActionCreateError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsBulkActionCreateVariables = {
  body: Schemas.AlertGroup;
};

/**
 * Perform a bulk action on a list of alert groups
 */
export const alertgroupsBulkActionCreate = (variables: AlertgroupsBulkActionCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<Schemas.AlertGroup, AlertgroupsBulkActionCreateError, Schemas.AlertGroup, {}, {}, {}>({
    url: '/alertgroups/bulk_action/',
    method: 'post',
    ...variables,
    signal,
  });

export type AlertgroupsBulkActionOptionsRetrieveError = Fetcher.ErrorWrapper<undefined>;

/**
 * Retrieve a list of valid bulk action options
 */
export const alertgroupsBulkActionOptionsRetrieve = (signal?: AbortSignal) =>
  onCallApiFetch<Schemas.AlertGroup, AlertgroupsBulkActionOptionsRetrieveError, undefined, {}, {}, {}>({
    url: '/alertgroups/bulk_action_options/',
    method: 'get',
    signal,
  });

export type AlertgroupsFiltersRetrieveError = Fetcher.ErrorWrapper<undefined>;

/**
 * Retrieve a list of valid filter options that can be used to filter alert groups
 */
export const alertgroupsFiltersRetrieve = (signal?: AbortSignal) =>
  onCallApiFetch<Schemas.AlertGroup, AlertgroupsFiltersRetrieveError, undefined, {}, {}, {}>({
    url: '/alertgroups/filters/',
    method: 'get',
    signal,
  });

export type AlertgroupsLabelsIdRetrievePathParams = {
  /**
   * @pattern ^.+/?$
   */
  keyId: string;
};

export type AlertgroupsLabelsIdRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsLabelsIdRetrieveVariables = {
  pathParams: AlertgroupsLabelsIdRetrievePathParams;
};

/**
 * Key with the list of values. IDs and names are interchangeable (see get_keys() for more details).
 */
export const alertgroupsLabelsIdRetrieve = (variables: AlertgroupsLabelsIdRetrieveVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.LabelKeyValues,
    AlertgroupsLabelsIdRetrieveError,
    undefined,
    {},
    {},
    AlertgroupsLabelsIdRetrievePathParams
  >({ url: '/alertgroups/labels/id/{keyId}', method: 'get', ...variables, signal });

export type AlertgroupsLabelsKeysListError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsLabelsKeysListResponse = Schemas.LabelKey[];

/**
 * List of alert group label keys.
 * IDs are the same as names to keep the response format consistent with LabelsViewSet.get_keys().
 */
export const alertgroupsLabelsKeysList = (signal?: AbortSignal) =>
  onCallApiFetch<AlertgroupsLabelsKeysListResponse, AlertgroupsLabelsKeysListError, undefined, {}, {}, {}>({
    url: '/alertgroups/labels/keys/',
    method: 'get',
    signal,
  });

export type AlertgroupsSilenceOptionsListQueryParams = {
  /**
   * The pagination cursor value.
   */
  cursor?: string;
  /**
   * Number of results to return per page.
   */
  perpage?: number;
  /**
   * A search term.
   */
  search?: string;
};

export type AlertgroupsSilenceOptionsListError = Fetcher.ErrorWrapper<undefined>;

export type AlertgroupsSilenceOptionsListVariables = {
  queryParams?: AlertgroupsSilenceOptionsListQueryParams;
};

/**
 * Retrieve a list of valid silence options
 */
export const alertgroupsSilenceOptionsList = (
  variables: AlertgroupsSilenceOptionsListVariables,
  signal?: AbortSignal
) =>
  onCallApiFetch<
    Schemas.PaginatedsilenceOptionsList,
    AlertgroupsSilenceOptionsListError,
    undefined,
    {},
    AlertgroupsSilenceOptionsListQueryParams,
    {}
  >({ url: '/alertgroups/silence_options/', method: 'get', ...variables, signal });

export type AlertgroupsStatsRetrieveError = Fetcher.ErrorWrapper<undefined>;

/**
 * Return number of alert groups capped at 100001
 */
export const alertgroupsStatsRetrieve = (signal?: AbortSignal) =>
  onCallApiFetch<Schemas.AlertGroupStats, AlertgroupsStatsRetrieveError, undefined, {}, {}, {}>({
    url: '/alertgroups/stats/',
    method: 'get',
    signal,
  });

export type FeaturesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type FeaturesRetrieveResponse = {
  [key: string]: any;
};

/**
 * Return whitelist of enabled features.
 * It is needed to disable features for On-prem installations.
 */
export const featuresRetrieve = (signal?: AbortSignal) =>
  onCallApiFetch<FeaturesRetrieveResponse, FeaturesRetrieveError, undefined, {}, {}, {}>({
    url: '/features/',
    method: 'get',
    signal,
  });

export type LabelsCreateError = Fetcher.ErrorWrapper<undefined>;

export type LabelsCreateRequestBody = Schemas.LabelCreate[];

export type LabelsCreateVariables = {
  body?: LabelsCreateRequestBody;
};

/**
 * Create a new label key with values(Optional)
 */
export const labelsCreate = (variables: LabelsCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<Schemas.LabelKeyValues, LabelsCreateError, LabelsCreateRequestBody, {}, {}, {}>({
    url: '/labels/',
    method: 'post',
    ...variables,
    signal,
  });

export type LabelsIdRetrievePathParams = {
  /**
   * @pattern ^[\w\-]+$
   */
  keyId: string;
};

export type LabelsIdRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type LabelsIdRetrieveVariables = {
  pathParams: LabelsIdRetrievePathParams;
};

/**
 * Key with the list of values
 */
export const labelsIdRetrieve = (variables: LabelsIdRetrieveVariables, signal?: AbortSignal) =>
  onCallApiFetch<Schemas.LabelKeyValues, LabelsIdRetrieveError, undefined, {}, {}, LabelsIdRetrievePathParams>({
    url: '/labels/id/{keyId}/',
    method: 'get',
    ...variables,
    signal,
  });

export type LabelsIdUpdatePathParams = {
  /**
   * @pattern ^[\w\-]+$
   */
  keyId: string;
};

export type LabelsIdUpdateError = Fetcher.ErrorWrapper<undefined>;

export type LabelsIdUpdateVariables = {
  body: Schemas.LabelRepr;
  pathParams: LabelsIdUpdatePathParams;
};

/**
 * Rename the key
 */
export const labelsIdUpdate = (variables: LabelsIdUpdateVariables, signal?: AbortSignal) =>
  onCallApiFetch<Schemas.LabelKeyValues, LabelsIdUpdateError, Schemas.LabelRepr, {}, {}, LabelsIdUpdatePathParams>({
    url: '/labels/id/{keyId}/',
    method: 'put',
    ...variables,
    signal,
  });

export type LabelsIdValuesCreatePathParams = {
  /**
   * @pattern ^[\w\-]+$
   */
  keyId: string;
};

export type LabelsIdValuesCreateError = Fetcher.ErrorWrapper<undefined>;

export type LabelsIdValuesCreateVariables = {
  body: Schemas.LabelRepr;
  pathParams: LabelsIdValuesCreatePathParams;
};

/**
 * Add a new value to the key
 */
export const labelsIdValuesCreate = (variables: LabelsIdValuesCreateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.LabelKeyValues,
    LabelsIdValuesCreateError,
    Schemas.LabelRepr,
    {},
    {},
    LabelsIdValuesCreatePathParams
  >({ url: '/labels/id/{keyId}/values/', method: 'post', ...variables, signal });

export type LabelsIdValuesRetrievePathParams = {
  /**
   * @pattern ^[\w\-]+$
   */
  keyId: string;
  /**
   * @pattern ^[\w\-]+$
   */
  valueId: string;
};

export type LabelsIdValuesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type LabelsIdValuesRetrieveVariables = {
  pathParams: LabelsIdValuesRetrievePathParams;
};

/**
 * Value name
 */
export const labelsIdValuesRetrieve = (variables: LabelsIdValuesRetrieveVariables, signal?: AbortSignal) =>
  onCallApiFetch<Schemas.LabelValue, LabelsIdValuesRetrieveError, undefined, {}, {}, LabelsIdValuesRetrievePathParams>({
    url: '/labels/id/{keyId}/values/{valueId}/',
    method: 'get',
    ...variables,
    signal,
  });

export type LabelsIdValuesUpdatePathParams = {
  /**
   * @pattern ^[\w\-]+$
   */
  keyId: string;
  /**
   * @pattern ^[\w\-]+$
   */
  valueId: string;
};

export type LabelsIdValuesUpdateError = Fetcher.ErrorWrapper<undefined>;

export type LabelsIdValuesUpdateVariables = {
  body: Schemas.LabelRepr;
  pathParams: LabelsIdValuesUpdatePathParams;
};

/**
 * Rename the value
 */
export const labelsIdValuesUpdate = (variables: LabelsIdValuesUpdateVariables, signal?: AbortSignal) =>
  onCallApiFetch<
    Schemas.LabelKeyValues,
    LabelsIdValuesUpdateError,
    Schemas.LabelRepr,
    {},
    {},
    LabelsIdValuesUpdatePathParams
  >({ url: '/labels/id/{keyId}/values/{valueId}/', method: 'put', ...variables, signal });

export type LabelsKeysListError = Fetcher.ErrorWrapper<undefined>;

export type LabelsKeysListResponse = Schemas.LabelKey[];

/**
 * List of labels keys
 */
export const labelsKeysList = (signal?: AbortSignal) =>
  onCallApiFetch<LabelsKeysListResponse, LabelsKeysListError, undefined, {}, {}, {}>({
    url: '/labels/keys/',
    method: 'get',
    signal,
  });

export const operationsByTag = {
  alertgroups: {
    alertgroupsList,
    alertgroupsRetrieve,
    alertgroupsDestroy,
    alertgroupsAcknowledgeCreate,
    alertgroupsAttachCreate,
    alertgroupsPreviewTemplateCreate,
    alertgroupsResolveCreate,
    alertgroupsSilenceCreate,
    alertgroupsUnacknowledgeCreate,
    alertgroupsUnattachCreate,
    alertgroupsUnpageUserCreate,
    alertgroupsUnresolveCreate,
    alertgroupsUnsilenceCreate,
    alertgroupsBulkActionCreate,
    alertgroupsBulkActionOptionsRetrieve,
    alertgroupsFiltersRetrieve,
    alertgroupsLabelsIdRetrieve,
    alertgroupsLabelsKeysList,
    alertgroupsSilenceOptionsList,
    alertgroupsStatsRetrieve,
  },
  features: { featuresRetrieve },
  labels: {
    labelsCreate,
    labelsIdRetrieve,
    labelsIdUpdate,
    labelsIdValuesCreate,
    labelsIdValuesRetrieve,
    labelsIdValuesUpdate,
    labelsKeysList,
  },
};
