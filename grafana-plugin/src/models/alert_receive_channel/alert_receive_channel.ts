import { omit } from 'lodash-es';
import { runInAction, makeAutoObservable, action } from 'mobx';

import { AlertTemplatesDTO } from 'models/alert_templates/alert_templates';
import { Alert } from 'models/alertgroup/alertgroup.types';
import { ChannelFilter } from 'models/channel_filter/channel_filter.types';
import { Heartbeat } from 'models/heartbeat/heartbeat.types';
import { OutgoingWebhook } from 'models/outgoing_webhook/outgoing_webhook.types';
import { makeRequest } from 'network';
import { ApiSchemas } from 'network/oncall-api/api.types';
import { operations } from 'network/oncall-api/autogenerated-api.types';
import onCallApi from 'network/oncall-api/http-client';
import { move } from 'state/helpers';
import { RootBaseStore } from 'state/rootBaseStore';
import { WithGlobalNotification } from 'utils/decorators';

import { AlertReceiveChannelCounters, ContactPoint } from './alert_receive_channel.types';

export class AlertReceiveChannelStore {
  path = '/alert_receive_channels/';
  rootStore: RootBaseStore;
  searchResult: Array<ApiSchemas['AlertReceiveChannel']['id']>;
  paginatedSearchResult: {
    count?: number;
    results?: Array<ApiSchemas['AlertReceiveChannel']['id']>;
    page_size?: number;
  } = {};
  items: {
    [id: string]: ApiSchemas['AlertReceiveChannel'];
  } = {};
  counters: { [id: string]: AlertReceiveChannelCounters } = {};
  channelFilterIds: { [id: string]: Array<ChannelFilter['id']> } = {};
  channelFilters: { [id: string]: ChannelFilter } = {};
  alertReceiveChannelToHeartbeat: {
    [id: string]: Heartbeat['id'];
  } = {};
  actions: { [id: string]: OutgoingWebhook[] } = {};
  alertReceiveChannelOptions: Array<ApiSchemas['AlertReceiveChannelIntegrationOptions']> = [];
  templates: { [id: string]: AlertTemplatesDTO[] } = {};
  connectedContactPoints: { [id: string]: ContactPoint[] } = {};

  constructor(rootStore: RootBaseStore) {
    makeAutoObservable(this, undefined, { autoBind: true });
    this.rootStore = rootStore;
  }

  // TODO: handle skipErrorHandling
  async create({
    data /* skipErrorHandling */,
  }: {
    data: ApiSchemas['AlertReceiveChannel'];
    skipErrorHandling?: boolean;
  }) {
    const result = await onCallApi.POST('/alert_receive_channels/', { params: {}, body: data });
    await this.rootStore.organizationStore.loadCurrentOrganization();
    return result.data;
  }

  // TODO: handle skipErrorHandling
  async update({
    id,
    data,
  }: // skipErrorHandling,
  {
    id: ApiSchemas['AlertReceiveChannelUpdate']['id'];
    data: ApiSchemas['AlertReceiveChannelUpdate'];
    skipErrorHandling?: boolean;
  }) {
    const result = await onCallApi.PUT('/alert_receive_channels/{id}/', { params: { path: { id } }, body: data });
    await this.rootStore.organizationStore.loadCurrentOrganization();
    return result.data;
  }

  async fetchItemById(
    id: ApiSchemas['AlertReceiveChannel']['id'],
    _skipErrorHandling = false // TODO: check it
  ): Promise<ApiSchemas['AlertReceiveChannel']> {
    const alertReceiveChannel = await onCallApi.GET('/alert_receive_channels/{id}/', { params: { path: { id } } });

    runInAction(() => {
      this.items = {
        ...this.items,
        [id]: { ...alertReceiveChannel.data, heartbeat: alertReceiveChannel.data.heartbeat || null },
      };
    });

    this.populateHearbeats([alertReceiveChannel.data]);

    return alertReceiveChannel.data;
  }

  async fetchItems(query: any = '') {
    const params = typeof query === 'string' ? { search: query } : query;

    const { results } = await makeRequest(this.path, { params });

    runInAction(() => {
      this.items = {
        ...this.items,
        ...results.reduce(
          (acc: { [key: number]: ApiSchemas['AlertReceiveChannel'] }, item: ApiSchemas['AlertReceiveChannel']) => ({
            ...acc,
            [item.id]: omit(item, 'heartbeat'),
          }),
          {}
        ),
      };
    });

    this.populateHearbeats(results);

    runInAction(() => {
      this.searchResult = results.map((item: ApiSchemas['AlertReceiveChannel']) => item.id);
    });

    this.updateCounters();

    return results;
  }

  async updatePaginatedItems({
    filters,
    page = 1,
    updateCounters = false,
    invalidateFn = undefined,
  }: {
    filters: operations['alert_receive_channels_list']['parameters']['query'];
    page: number;
    updateCounters: boolean;
    invalidateFn: () => boolean;
  }) {
    const { count, results, page_size } = await makeRequest(this.path, { params: { ...filters, page } });

    if (invalidateFn?.()) {
      return undefined;
    }

    runInAction(() => {
      this.items = {
        ...this.items,
        ...results.reduce(
          (acc: { [key: number]: ApiSchemas['AlertReceiveChannel'] }, item: ApiSchemas['AlertReceiveChannel']) => ({
            ...acc,
            [item.id]: omit(item, 'heartbeat'),
          }),
          {}
        ),
      };
    });

    this.populateHearbeats(results);

    runInAction(() => {
      this.paginatedSearchResult = {
        count,
        results: results.map((item: ApiSchemas['AlertReceiveChannel']) => item.id),
        page_size,
      };
    });

    if (updateCounters) {
      this.updateCounters();
    }

    return results;
  }

  populateHearbeats(alertReceiveChannels: Array<ApiSchemas['AlertReceiveChannel']>) {
    const heartbeats = alertReceiveChannels.reduce(
      (acc: any, alertReceiveChannel: ApiSchemas['AlertReceiveChannel']) => {
        if (alertReceiveChannel.heartbeat) {
          acc[alertReceiveChannel.heartbeat.id] = alertReceiveChannel.heartbeat;
        }

        return acc;
      },
      {}
    );

    runInAction(() => {
      this.rootStore.heartbeatStore.items = {
        ...this.rootStore.heartbeatStore.items,
        ...heartbeats,
      };
    });

    const alertReceiveChannelToHeartbeat = alertReceiveChannels.reduce(
      (acc: any, alertReceiveChannel: ApiSchemas['AlertReceiveChannel']) => {
        if (alertReceiveChannel.heartbeat) {
          acc[alertReceiveChannel.id] = alertReceiveChannel.heartbeat.id;
        }

        return acc;
      },
      {}
    );

    runInAction(() => {
      this.alertReceiveChannelToHeartbeat = {
        ...this.alertReceiveChannelToHeartbeat,
        ...alertReceiveChannelToHeartbeat,
      };
    });
  }

  async updateChannelFilters(alertReceiveChannelId: ApiSchemas['AlertReceiveChannel']['id'], isOverwrite = false) {
    const response = await makeRequest(`/channel_filters/`, {
      params: { alert_receive_channel: alertReceiveChannelId },
    });

    const channelFilters = response.reduce(
      (acc: any, channelFilter: ChannelFilter) => ({
        ...acc,
        [channelFilter.id]: channelFilter,
      }),
      {}
    );

    runInAction(() => {
      this.channelFilters = {
        ...this.channelFilters,
        ...channelFilters,
      };
    });

    if (isOverwrite) {
      runInAction(() => {
        // This is needed because on Move Up/Down/Removal the store no longer reflects the correct state
        this.channelFilters = {
          ...channelFilters,
        };
      });
    }

    runInAction(() => {
      this.channelFilterIds = {
        ...this.channelFilterIds,
        [alertReceiveChannelId]: response.map((channelFilter: ChannelFilter) => channelFilter.id),
      };
    });
  }

  async updateChannelFilter(channelFilterId: ChannelFilter['id']) {
    const response = await makeRequest(`/channel_filters/${channelFilterId}/`, {});

    runInAction(() => {
      this.channelFilters = {
        ...this.channelFilters,
        [channelFilterId]: response,
      };
    });
  }

  async saveChannelFilter(channelFilterId: ChannelFilter['id'], data: Partial<ChannelFilter>) {
    const response = await makeRequest(`/channel_filters/${channelFilterId}/`, {
      method: 'PUT',
      data,
    });

    runInAction(() => {
      this.channelFilters = {
        ...this.channelFilters,
        [response.id]: response,
      };
    });

    return response;
  }

  async moveChannelFilterToPosition(
    alertReceiveChannelId: ApiSchemas['AlertReceiveChannel']['id'],
    oldIndex: number,
    newIndex: number
  ) {
    const channelFilterId = this.channelFilterIds[alertReceiveChannelId][oldIndex];

    this.channelFilterIds[alertReceiveChannelId] = move(
      this.channelFilterIds[alertReceiveChannelId],
      oldIndex,
      newIndex
    );

    await makeRequest(`/channel_filters/${channelFilterId}/move_to_position/?position=${newIndex}`, { method: 'PUT' });

    this.updateChannelFilters(alertReceiveChannelId, true);
  }

  async deleteChannelFilter(channelFilterId: ChannelFilter['id']) {
    const channelFilter = this.channelFilters[channelFilterId];

    this.channelFilterIds[channelFilter.alert_receive_channel].splice(
      this.channelFilterIds[channelFilter.alert_receive_channel].indexOf(channelFilterId),
      1
    );

    await makeRequest(`/channel_filters/${channelFilterId}`, {
      method: 'DELETE',
    });

    return this.updateChannelFilters(channelFilter.alert_receive_channel, true);
  }

  async updateAlertReceiveChannelOptions() {
    const response = await makeRequest(`/alert_receive_channels/integration_options/`, {});

    runInAction(() => {
      this.alertReceiveChannelOptions = response;
    });
  }

  @WithGlobalNotification({ success: 'Integration has been saved', failure: 'Failed to save integration' })
  @action.bound
  async saveAlertReceiveChannel(
    id: ApiSchemas['AlertReceiveChannel']['id'],
    payload: Partial<ApiSchemas['AlertReceiveChannelUpdate']>
  ) {
    const { data } = await onCallApi.PUT('/alert_receive_channels/{id}/', {
      params: { path: { id } },
      body: { ...this.items[id], heartbeat: payload.heartbeat || null, ...payload },
    });

    runInAction(() => {
      this.items = {
        ...this.items,
        [id]: data,
      };
    });
  }

  async updateTemplates(alertReceiveChannelId: ApiSchemas['AlertReceiveChannel']['id'], alertGroupId?: Alert['pk']) {
    const response = await makeRequest(`/alert_receive_channel_templates/${alertReceiveChannelId}/`, {
      params: { alert_group_id: alertGroupId },
      withCredentials: true,
    });

    runInAction(() => {
      this.templates = {
        ...this.templates,
        [alertReceiveChannelId]: response,
      };
    });
  }

  async saveTemplates(
    alertReceiveChannelId: ApiSchemas['AlertReceiveChannel']['id'],
    data: Partial<AlertTemplatesDTO>
  ) {
    const response = await makeRequest(`/alert_receive_channel_templates/${alertReceiveChannelId}/`, {
      method: 'PUT',
      data,
      withCredentials: true,
    });

    runInAction(() => {
      this.templates = {
        ...this.templates,
        [alertReceiveChannelId]: response,
      };
    });
  }

  async updateConnectedContactPoints(alertReceiveChannelId: ApiSchemas['AlertReceiveChannel']['id']) {
    const response = await makeRequest(`${this.path}${alertReceiveChannelId}/connected_contact_points `, {});

    runInAction(() => {
      this.connectedContactPoints = {
        ...this.connectedContactPoints,

        [alertReceiveChannelId]: response.reduce((list: ContactPoint[], payload) => {
          payload.contact_points.forEach((contactPoint: { name: string; notification_connected: boolean }) => {
            list.push({
              dataSourceName: payload.name,
              dataSourceId: payload.uid,
              contactPoint: contactPoint.name,
              notificationConnected: contactPoint.notification_connected,
            });
          });

          return list;
        }, []),
      };
    });
  }

  async updateCounters() {
    const counters = await makeRequest(`${this.path}counters`, {
      method: 'GET',
    });

    runInAction(() => {
      this.counters = counters;
    });
  }

  async updateCountersForIntegration(id: ApiSchemas['AlertReceiveChannel']['id']): Promise<any> {
    const counters = await makeRequest(`${this.path}${id}/counters`, {
      method: 'GET',
    });

    runInAction(() => {
      this.counters = {
        ...this.counters,
        [id]: {
          ...counters[id],
        },
      };
    });

    return counters;
  }
}
